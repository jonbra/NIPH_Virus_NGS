// Some default parameters
params.multiqc_config = "$baseDir/multiqc_config.yaml"
params {
    map_to_reference = false
}

profiles {
    test {
        params {
            agens = "HCV"
            outdir = "$baseDir/Test"
            spades_mode = "rnaviral"
            kraken_all = "dummy"
            kraken_focused = "dummy"
            blast_db = "dummy"
        }
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        // Increase time available to build Conda environment
        conda.createTimeout    = "120 min"
        workDir = "/media/jonr/SATA6TB/work"
    }
    docker {
        docker.enabled         = true
        workDir = "/media/jonr/SATA6TB/work"
    }
}

process {
    withLabel:large {
        cpus          = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory        = { check_max( 72.GB * task.attempt, 'memory'  ) }
    }
    withLabel:medium {
        cpus          = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 36.GB * task.attempt, 'memory'  ) }
    }
    withLabel:small {
        cpus          = { check_max( 1                  , 'cpus'    ) }
        memory        = { check_max( 6.GB * task.attempt, 'memory'  ) }
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
// Taken from the nf-core SAREK pipeline: https://github.com/nf-core/sarek/blob/59026dc07633edb83aab3bfb2f65f79db38437a1/nextflow.config
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')

params.reportdir = "${params.outdir}/run_reports"

report {
    enabled = true
    file = "${params.reportdir}/nextflow_report_${trace_timestamp}.html"
}

trace {
    enabled = true
    file = "${params.reportdir}/nextflow_trace_${trace_timestamp}.txt"
}

timeline {
    enabled = true
    file = "${params.reportdir}/nextflow_timeline_${trace_timestamp}.html"
}

dag {
    enabled = true
    overwrite = true
    file = "${params.reportdir}/nextflow_flowchart_${trace_timestamp}.html"
}
